# -*- coding: utf-8 -*-
"""
Created on Tue Sep 29 17:15:09 2015

@author: Terry
"""

import pandas as pd
import numpy as np
import math
import scipy.stats as ss

file_location="c:/Users/Terry/Documents/Python Scripts/Sample data.xlsx"
test=pd.read_excel(file_location,sheetname="Sheet1")
df=test.drop(test.columns[0:4],axis=1)
df.columns=["date","bid_ask","price","volume"]
df=df[df.bid_ask!='TRADE']
df.volume=df.volume.fillna(0)
df.index=range(len(df.volume))

# check the total volume
print np.sum(df.volume)

# define function to group data accroding to volume size
def volume(co,size):
    su=0
    while su<size: 
          su=su+df.volume[co]
          co+=1
    return(su,co)
    
    
# use the function to obtain last price and volume size of each volume bar
counter=0
count=0
size=10000
last_index=[]
volume_bar_size=[]
try:
     while count<np.nansum(df.volume)/size:
            sum=volume(counter,size)[0]
            counter=volume(counter,size)[1]
            last_index.append(counter-1)
            volume_bar_size.append(sum)
            count+=1
except:   
      pass

last_index.append(df.volume.index[-1])
volume_bar_size.append(np.nansum(df.volume[last_index[-2]+1:last_index[-1]+1]))
last_price=df.price[last_index]

# test if volume bar is correct
print np.sum(df.volume)
print np.sum(volume_bar_size)

price_volumebar=np.zeros((len(last_index),2))
price_volumebar=pd.DataFrame(price_volumebar,index=last_index,columns=['price','bar_size'])
price_volumebar.price=df.price[last_index]
price_volumebar.bar_size=volume_bar_size

# volume-weighted standard deviation
def weighted_std(values, weights):
   mean = np.nanmean(values)
   weight_variance = weights*((values-mean)**2)
   weight_sum=np.nansum(weights)
   variance_sum=np.nansum(weight_variance)
   stDev=math.sqrt(variance_sum/weight_sum)
   return (stDev)
   
d_price_diff=np.diff(price_volumebar.price)
stDev=weighted_std(d_price_diff,price_volumebar.bar_size[1:])

buy_sell=np.zeros((len(d_price_diff),4))
buy_sell=pd.DataFrame(buy_sell,columns=['buy','sell','total','label'])

# Applying BVC algorithm
for i in range(0,len(d_price_diff)): 
    buy_sell.loc[i,'buy']=price_volumebar.bar_size[last_index[i+1]]*ss.t.cdf(d_price_diff[i]/stDev,0.25)
    buy_sell.loc[i,'sell']=price_volumebar.bar_size[last_index[i+1]]-buy_sell.buy[i]
    buy_sell.loc[i,'total']=price_volumebar.bar_size[last_index[i+1]]

# If more buys, then label the var as 'buy'
for j in range(0,len(d_price_diff)):
    if buy_sell.buy[j]-buy_sell.sell[j]>0:
        buy_sell.loc[j,'label']='buy'
    else:
        buy_sell.loc[j,'label']='sell'

time_bar_index=df.date[last_index]

# caculate VPIN
buy_sell_vspread=buy_sell.buy-buy_sell.sell
#vpin=np.nansum(abs(buy_sell.buy-buy_sell.sell))/np.nansum(buy_sell.total)
rolling_size=10
vpin=pd.rolling_mean(buy_sell_vspread,rolling_size)/size
rstd=pd.rolling_std(last_price,rolling_size)

# corresponded time index
time_bar_index=df.date[last_index]
b=[str(i) for i in time_bar_index]
a=range(len(vpin))
a=[float(i) for i in a]

# plot of VPIN vs Price
import matplotlib.pyplot as plt

fig,ax1=plt.subplots()
ax1.plot(vpin,color='red',label='VPIN')
ax1.set_ylabel('VPIN',color='red',fontsize=18)
ax1.set_xticks(a,minor=False)
ax1.set_xticklabels(b, rotation=60)
ax2=ax1.twinx()
ax2.plot(last_price,color='blue',label='sell volume')
ax2.set_ylabel('Price',color='blue',fontsize=18)


fig,ax1=plt.subplots()
ax1.plot(rstd**2,color='red',label='VPIN')
ax1.set_ylabel('Voltality',color='red',fontsize=18)
ax1.set_xticks(a,minor=False)
ax1.set_xticklabels(b, rotation=60)
ax2=ax1.twinx()
ax2.plot(last_price,color='blue',label='sell volume')
ax2.set_ylabel('Price',color='blue',fontsize=18)

plt.figure()
plt.plot(buy_sell_vspread,d_price_diff,'o')

slope, intercept, r_value, p_value, std_err = ss.linregress(d_price_diff, buy_sell_vspread)
print "r-squared:", r_value**2


# To calculate the actual buy and sell volume
actual_buy_sell=np.zeros((len(last_index),3))
actual_buy_sell=pd.DataFrame(actual_buy_sell,columns=['buy','sell','total'])

for i in range(0,len(last_index)):
    if i==0:
       actual_buy_sell.buy[i]=np.nansum(df.volume[0:last_index[i]][df.bid_ask[0:last_index[i]]=='BID'])
       actual_buy_sell.sell[i]=np.nansum(df.volume[0:last_index[i]][df.bid_ask[0:last_index[i]]=='ASK'])
       actual_buy_sell.total[i]=np.nansum(df.volume[0:last_index[i]])
    if i>0:
        actual_buy_sell.buy[i]=np.nansum(df.volume[last_index[i-1]+1:last_index[i]][df.bid_ask[last_index[i-1]+1:last_index[i]]=='BID'])
        actual_buy_sell.sell[i]=np.nansum(df.volume[last_index[i-1]+1:last_index[i]][df.bid_ask[last_index[i-1]+1:last_index[i]]=='ASK'])
        actual_buy_sell.total[i]=np.nansum(df.volume[last_index[i-1]+1:last_index[i]])


# test the accuracy of BVC
bulk=np.zeros((len(d_price_diff),1))
for i in range(0,len(d_price_diff)):
    bulk[i]=min(buy_sell.buy[i],actual_buy_sell.buy[i+1])+min(buy_sell.sell[i],actual_buy_sell.sell[i+1])

a_ratio=np.nansum(bulk)/np.nansum(buy_sell.total)

print 'accuracy ratio is:',a_ratio
